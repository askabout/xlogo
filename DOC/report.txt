





                      ----------------------------
                              Xlogo Project
                      ----------------------------

                   Проект "Системное программирование"
                  
                   Реализация графического языка Logo




Отчет подготовлен					  Аргиров А.С.

Преподаватель						 Алексеев Г.И.



			I) О проекте в целом.

         Итак,  что  представляет из себя проект XLogo ? Это какая уже
по  счету  реализация  графического языка Logo. Этот язык еще называют
черепашьим,  потому  что  с  помощью  него  можно  управлять на экране
монитора  так и называемой черепашкой, которая послушно исполняет ваши
команды,  т.е.  бегает   взад-вперед,   при  этом  оставляя сзади себя
след,  который  вам и    позволяет    рисовать   всякие   замысловатые
картинки,    может  поворачиваться   в   различные   стороны   и  т.д.
и  т.п.  Язык  Logo может использоваться  в  основном,  как  обучающий
основам  программирования  язык,  но  не  больше.  Кажущаяся с первого
взгляда  его  простота,  на  самом деле,  обманчива, на самом деле его
реализация  не  так  проста  и  требует  рассмотрения  основ написания
мощных языков высокого уровня, таких как Basic, Pascal, C и другие.
         Данная  реализация  Logo  представляет  из себя интерактивный
интерпретатор,   когда   каждая   новая   вводимая   строка  заносится
в  программу  и  тут  же  исполняется  без замедлений. Главной задачей
авторов  проекта было написание удобной в обращении, понятной обычному
пользователю,   программы,   которая   смогла   бы  воплотить  в  себе
большинство  возможностей  реального  языка  Logo. "Изюминкой" каждого
такого  проекта  является  то,  что  каждый  его автор может воплотить
в  программе  свои  творческие  идеи,  т.о.  внести  в  стандарт  Logo
значительные  улучшения  и удобства. Примером реализации проекта таким
образом  может  являться  язык  C++,  который  был  написан  на основе
стандартного   C,  с  введением  всяких  новшеств,  которые  позволили
перевести язык на качественно новый уровень.
         Языком    XLogo    были   реализованы   по   возможности  все
стандартные команды языка  Logo  (рисование  линий,  эллипсов  разными
цветами,   закраска  замкнутых   поверхностей   и   т.д.),   циклы  со
счетчиком   и  условием, процедуры без параметров, условные операторы,
выражения.
         Среди  возможностей  работы  с  программой реализованы запись
и  чтение  программы  с диска, режимы редактирования, замены и вставки
строк,   точки   останова  для  удобной  отладки,  средства  просмотра
программы и др.
         При   написании   XLogo,   каждый   его   автор  разрабатывал
собственную   значимую     часть    проекта,    которые   впоследствии
собирались   вместе,  образуя  единый  целый  проект.  Из-за  нехватки
"рабочей силы" приходилось несколько   частей  проекта  писать  одному
человеку.  Далее  следует перечень авторов и задач их реализаций:

А.Аргиров ─┬─> Монитор
           │	- эта  часть  как раз является тем "клеем", на котором
           │      держатся  все остальные части, т.е. является главной
           │	  и реализует работу всего проекта в целом.
           └─> Интерфейс
                - реализует интерфейс с пользователем (окна, диалоги и
                  т.д.)
                - редактор,  который  тоже  должен  был быть отдельной
                  частью

С.Андрюшкевич ───> Интерпретатор
		- обработка   потока  лексем  и  выполнение  действий,
                  связанных с движением "черепашки" и рисованием.

К.Овечкин ─┬─> Лексический анализатор
           │	- разбор  вводимых  строк  на  лексемы для последующей
           │      обработки    их    синтаксическим   анализатором   и 
           │      интерпретатором
           └─> Буфер
           	- реализует  хранение  в  памяти  массива  лексем и по
                  надобности   отдает   эти   лексемы  для  дальнейшей
                  обработки
                - в целом просто хранит вводимую программу
 
К.Бадаев ───> Синтаксический анализатор
		- проверка синтаксиса (правильности введения) команд
                - проверка правильности и вычисление выражений

Н.Бускин ───> Файлы
		- не  менее  важная  часть,  т.к.  позволяет сохранять
                  набранную  программу  на  диск, а также считывать ее
                  при надобности
                - интерфейс для выбора файлов из списка

В.Горшков ───> Помощь
		- реализация   окон  помощи,  где  любой  пользователь
                  научится программировать на XLogo



				II) Монитор

1. Поставленная задача

         Итак,  как  уже  было  сказано выше, основной моей целью было
собрать  проект, отладить и реализовать мало-мальски удобный интерфейс
для  работы  в  среде  XLogo  (я  не  увлекался  этим,  поэтому  какой
получился, такой и есть)
         Монитор  - главная программа, которая запускается с командной
строки  и  то  что  вы  видите  на экране (менюшки, окна и т.д.) - все
реализуется   монитором.   Монитор  обеспечивает  взаимодействие  всех
модулей в программе и использует их для работы.

2. А что имеется ?

          А   имеется   куча  модулей,  написанных  естественно  мной,
из  которых  один  (главный) реализует саму программу, а все остальные
в  основном  занимаются  интерфейсом.  Что  ж,  рассмотрим  все  более
подробно...

		XLOGO    CPP
       		------------

         Это  -  "самый страшный зверь", назначение которого, я думаю,
объяснять уже не надо. Как же теперь оно работает ?
         Проект  запускается  с  командной строки и не требует ничего,
кроме   самого   себя (кроме, может быть, файла помощи). От аппаратной
части  тоже  почти ничего не зависит. Просто  нужна  как  минимум  VGA
видео-карточка   и   компьютер  на  базе  процессора > 286. А еще надо
базовой  памяти  немного,  а  чем  больше,  тем лучше  (все места, где
выделяется   память,   надежно  защищены  проверками,  что   позволяет
избежать   возможных  "зависаний"  при  отсутствии  памяти.  Не   буду
скрывать   -  где-то  все  еще  имеется брешь, которая иногда приводит
к "зависаниям" при нехватке памяти)
         При  желании  в командной строке можно указать имя программы,
которую  необходимо  загрузить.  Программа  запускается  и  производит
инициализацию  всех  модулей.  Появляется так называемый рабочий стол.
Вверху расположено меню, где заданы основные команды управления. Снизу
- статусная строка. Большое окно в центре, где отображаются результаты
работы  интерпретатора,  и  поменьше  внизу  -  консоль,  где вводятся
команды. Далее привожу схему основного цикла работы программы:

	1) Ввод новой/редактирование существующей строки. 
           - зависит  от режима ввода, если включен режим редактирова-
             ния или ранее вводимая строка содержала ошибку, она пода-
             ется на редактирование и курсор становится в позицию, где
             произошла ошибка (вернее, если произошла ошибка, режим ре
             дактирования включается автоматически)
           - если  включен  режим  вставки или замены, то предлагается
             просто ввести новую строку
           - во время редактирования обрабатываются "горячие" клавиши,
             такие как: вызов меню, запись, загрузка, запуск, листинг
        2) Лексический анализ введеной строки и создание потока лексем
           - в случае ошибки идем к 1) и редактируем строку
	3) Синтаксический анализ потока лексем
           - в случае ошибки идем к 1) и редактируем строку
        4) Смотрим, какая поступила команда:
           - самого языка. В данном случае вставляем строку в програм-
             му  или  заменяем  текущую. Выполняем команду. Если ранее
             вводилась  строка,  имеющая больший номер, чем у текущей,
             то выполняем также и все предшедствующие текущей, строки.
             Таким  же  образом поступаем, если при выполнении предыду
             щей  команды возникла ошибка за исключением случая, когда
             вводимая  строка  была  последней  в программе. Все такие
             "хитрости" и обеспечивают правильную интерактивность, т.е
             то  что видно на экране, соответствует тому, что в данный
             момент написано в программе.
           - системная.   В  данном  случае  вызывается  интерпретатор
             системных  команд.  Системные команды - запись, загрузка,
             создание, контролируются на ошибки. Если мы загружаем или
             создаем новую программу, а старая не была записана -  вы-
             дается предупреждение. В общем все сделано, чтобы не зату
             манивать пользователю голову всяческими непонятными дейст
             виями.
	5) Переходим к шагу 1)

        Как уже стало ясно, есть три режима ввода программы - вставка,
редактирование,  замена.  После  ввода строки и при отсутствии ошибки,
счетчик  номера  строки  увеличивается  на  единицу  и  это  далее уже
определяет поведение программы.
        Перед  выходом из программы происходит освобождение всей ранее
выделенной памяти и подготовка к выходу.

		EDIT     CPP
        	------------

         Модуль,  обеспечивающий  ввод  команд  с клавиатуры. Рисуется
строка ввода и мигающий курсор. Клавиши, поддерживаемые редактором:

        Left Arrow/Right Arrow
        	- перемещение курсора по тексту влево/вправо. Если вся
                  строка не входит в рамки ввода, текст будет скролли-
                  роваться.
        Ctrl + Left Arrow/Right Arrow
        	- перемещение курсора по словам текста влево/вправо
        Home/End
        	- перейти на начало/конец строки
        Insert
        	- переключение режима вставка (_) / замена (■). В режи
                  ме вставки  вводимый  символ  вставляется перед кур-
                  сором. В режиме замены символ, на котором стоит кур-
                  сор, заменяется нововведенным символом.
	Backspace/Delete
        	- удаляет символ перед курсором/после курсора
        Up Arrow/Down Arrow
        	- позволит выбрать ранее введенную строку для редакти-
                  рования. Для этого каждая новая введенная строка по-
                  мещается  в  специальный  буфер, при этом предыдущие
                  строки сдвигаются вверх.

         В    случае   нажатия   другой  клавиши  вызывается  функция,
переданная при  инициализации  строки  ввода. Эта функция обрабатывает
нажимаемые  клавиши  и может изменять вводимую строку, позицию курсора
в ней и даже менять код нажимаемой клавиши.
         Кроме   того,  если  вы собираетесь использовать одну и ту же
строку   ввода   несколько   раз,  вовсе  не  обязательно  каждый  раз
инициализировать  ее  снова,  для  этого параметры строки (в том числе
и  буфер)  сохраняются в отдельной структуре и подставляются в функцию
редактирования    по   мере   надобности.   Такой   способ   позволяет
использовать, например, разные буфера строк для разных диалогов.

		CONSOLE  CPP
        	------------
        
         Консоль   является   некоторым   расширением   строки  ввода.
Представляет  из  себя  окошко  из  нескольких  строк.  Здесь мы можем
не   только   вводить  строку,  но  также  и  распечатывать  различные
сообщения.  При  этом ранее выводимые строки сдвигаются на одну вверх.
Кроме  того,  консоль имеет свой собственный буфер и клавишами Page Up
/Page Down можно просматривать ранее выводимые сообщения.

		MENU     CPP
        	------------

         Меню   располагается   в   верхней  части  экрана  и  служит,
в  основном, для выполнения часто используемых системных команд, таких
как:  запись  и чтение файлов, выбор режимов редактирования программы,
листинг   и   запуск   программы,   вызов   помощи.  Меню  практически
используется   очень   редко,  т.к.  большинство  его  действий  легко
выполняются при нажатии некоторой клавиши.
         Меню   создается  специальными  функциями  (добавить  подменю
и  элемент подменю) при старте программы и впоследствии не изменяется.
Оно  вызывается из главной программы по нажатии клавиши F10 и на экран
выводится список элементов одного из подменю. Клавиши управления:

	Up Arrow/Down Arrow
        	- перемещение указателем по элементам вверх/вниз

        Left Arrow/Right Arrow
        	- выбор нужного подменю

        Enter
        	- выбор элемента под указателем

        Escape
        	- выход из меню

         При   нажатии   Enter   функция   возвращает  уникальный  код
выбранного элемента меню, дальнейшие действия выполняются уже основной
программой.

           	DIALOGS  CPP
	       	------------

         Диалоги  очень  просты,  создаются  и  вызываются из основной
программы.  Для  создания  используются  функции для добавления кнопок
и текста. При вызове диалога на экране появляется окно нужных размеров
и  нужным  заголовком.  В  окне  отображаются  текст и кнопки. Клавиши
управления:

	Right Arrow, Down Arrow, Tab
        	- выбор следующей кнопки

        Left Arrow, Up Arrow, Shift+Tab
        	- выбор предудущей кнопки

        Home, Page Up
        	- выбор первой кнопки

        End, Page Down
        	- выбор последней кнопки

        Enter
        	- выбор кнопки

        Escape
        	- возврат со специальным кодом отмены

         При  нажатии  Enter  функция возвращает уникальный для кнопки
код,  указанный  при ее добавлении в диалог, окно диалога закрывается,
дальнейшие  действия определяются основной программой по возвращенному
коду.

                LISTBOX  CPP
        	------------

         Листбоксы  позволяют  пользователю  выбрать  из списка нужный
элемент. В список элементы добавляются из основной программы. Элементы
могут быть ЛЮБОГО типа, лишь бы сначала шла строка - она и будет видна
на  экране.  При вызове листбокса, на экране возникает окно со списком
элементов. Клавиши управления:

	Up Arrow/Down Arrow
        	- перемещение указателем вверх/вниз
                - если элементов много, окно будет прокручиваться

        Page Up/Page Down
        	- страничное перемещение указателем вверх/вниз

        Home/End
        	- выбор первого/последнего элемента

        Left Arrow/Right Arrow
        	- если  строка элемента слишком длинная, происходит ее
                  прокрутка влево/вправо

        Enter
        	- возврат элемента под указателем

        Escape
        	- возврат специального кода отмены действия

         При нажатии Enter в основную программу возвращается выбранный
элемент,  добавленный  при  инициализации  списка,  окно  закрывается.
Дальнейшие действия определяются основной программой.

                STATUS   CPP
        	------------

         Статусная  строка  располагается  внизу  экрана  и служит для
отображения  служебной  информации  (координаты  пера, угол пера, цвет
и  т.д.)  Данный  модуль  служит  для вывода статусной строки на экран
и  постоянного  обновления  служебной  информации  на ней. Обновляются
не  вся  информация  сразу,  а только та, которая изменилась с момента
последнего вывода.

                GRAPH    CPP
        	------------

         Этот   графический  модуль  несколько  расширяет  стандартные
возможности   графики  в  C  и  служит,  в  основном,  для  реализации
интерфейса в XLogo. Среди таких возможностей:
	- открытие определенного графического режима
        - рисование всяческих рамок
        - открытие/закрытие окон с заголовком и без заголовка
        - рисование кнопок
        - рисование "трехмерных" линий
        - сохранение   в   стек/загрузка    из    стека    графических
          характеристик (цвет, параметры шрифтов и т.д)

3.    Характеристики    проекта    (размеры    приведены   без   учета
файлов-заголовков)

         Язык программирования				C++
         Технические требования				>286,VGA,640кб
         Операционная система				MS-DOS

	 Размер моей части проекта      		2053стр,46кб
         Размер проекта 				4724стр,103кб

         Размер исполняемого файла (без отлад. инф-и)	118кб
         Размер файла помощи				32кб

         Размер дистрибутива (с примерами)		153кб


                        III) Вместо заключения.

         А зачем это все читать ? Запускайте проект и наслаждайтесь !
