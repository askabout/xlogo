#CONTENTS


               ___    ___
               \  \  /  /  
      __________\  \/  /_________
     \        __ \    / __   __  \
      \ |    /  \ \  / / __ /  \  \
      / |___ \__/ /  \ \__/ \__/  /
     /___________/    \__________/
                /  /\  \
               /__/  \__\



 ┌───────────────────────────────────┐
 │╔══════════════════════════════════╧╗
 │║                                   ║
 │║ ~Язык XLogo снаружи               ,XLOGOOUTSIDE~ ║
 │║ ~Язык XLogo изнутри               ,XLOGOINSIDE~ ║
 │║ ~Сообщения об ошибках             ,ERRORS~ ║
 │║ ~Как пользоваться помощью         ,HOWTOUSEHELP~ ║
 │║ ~Кто и зачем авторы               ,AUTHORS~ ║
 └╢                                   ║
  ╚═══════════════════════════════════╝

#INDEX

┌───────────────┐
│ Список команд │
└───────────────┘

Системные команды

    ~BPCLEAR,BPCLEAR~      ~BPTOGGLE,BPTOGGLE~
    ~CHANGE,CHANGE~       ~DEL,DEL~
    ~EDIT,EDIT~         ~INSERT,INSERT~
    ~LINES,LINES~        ~LIST,LIST~
    ~LOAD,LOAD~         ~NEW,NEW~
    ~PENHIDE,PENHIDE~      ~PENSHOW,PENSHOW~
    ~PRINT,PRINT~        ~QUIT,QUIT~
    ~RUN,RUN~          ~SAVE,SAVE~

Команды языка

    ~ADD,ADD~          ~ANGLE,ANGLE~
    ~BCOLOR,BCOLOR~       ~BWD,BWD~
    ~CALL,CALL~         ~CLS,CLS~
    ~DELAY,DELAY~        ~DIV,DIV~
    ~ELLIPSE,ELLIPSE~      ~ELSE,ELSE~
    ~END,END~          ~ENDIF,ENDIF~
    ~FILL,FILL~         ~FWD,FWD~
    ~IF,IF~           ~LEFT,LEFT~
    ~LET,LET~          ~LINESTYLE,LINESTYLE~
    ~MUL,MUL~          ~PCOLOR,PCOLOR~
    ~PENDOWN,PENDOWN~      ~PENUP,PENUP~
    ~PROC,PROC~         ~REPEAT,REPEAT~
    ~RETURN,RETURN~       ~RIGHT,RIGHT~
    ~SETX,SETX~         ~SETXY,SETXY~
    ~SETY,SETY~         ~STOP,STOP~
    ~SUB,SUB~          ~WHILE,WHILE~

#HOWTOUSEHELP

┌──────────────────────────┐
│ Как пользоваться помощью │
└──────────────────────────┘

    Если вы сюда попали, то уже можно сказать, что пользоваться помощью вы умеете
    Но если вы попали сюда случайно, не лишне будет ознакомить вас с инструкцией по эксплуатации помощи

    Жмите кнопки со стрелками для перемещения по тексту помощи вверх-вниз-влево-вправо, а также PageUp и PageDown для страничного перемещения по тексту вверх-вниз
    Весь текст помощи может не входить полностью на экран, видна лишь часть текста
    Желтым цветом выделяются ссылки, они подкрашиваются другим цветом при наведении курсора
    Если нажать Enter, находясь на ссылке, можно увидеть новый текст помощи, соответствующий этой ссылке
    Для перемещения по ссылкам можно использовать клавиши Tab,Shift-Tab
    Для выхода из помощи достаточно нажать Escape
    Дополнительные возможности:

    F1       - вызов этой темы (вероятно, так вы сюда и попали)
    Shift-F1 - список команд
    Alt-F1   - предыдущая тема

    Теперь нажмите ~сюда,CONTENTS~ и попадете в содержание

#AUTHORS

┌────────────────────┐
│ Кто и зачем авторы │
└────────────────────┘

    Сие творение, представленное вам, - дело рук обычных, с виду ничем не примечательных студентов из обычной группы 804Б1 ВКИ НГУ
    
    Огромная благодарность:

    Овечкину Константину за его нелегкие труды в написании модуля лексического анализатора и интерфейса для хранения в памяти компьютера программы, написанной на XLogo
    Андрюшкевичу Сергею за представленную им, самую ответственную часть XLogo - интерпретатор команд языка, без которого все остальное было бы просто килобайтами никому не нужного исходного текста
    Бускину Николаю за написанный им модуль, с помощью которого стало возможным записывать на диск программы XLogo и загружать с него их
    Бадаеву Кириллу за очень нужную часть проекта - синтаксический анализатор, проверяющий на правильность вводимые вами строки
    Горшкову Вячеславу за прекрасный модуль помощи, средствами которого вы сейчас читаете этот текст
    Аргирову Антону за написание всего, что соединило воедино все части XLogo и обеспечило приятное времяпровождение за работой с проектом, и, конечно, за написание сего текста помощи
    
    И особое спасибо Алексееву Геннадию Ивановичу - преподавателю проекта, за предоставленный им теоретический материал, помощь в написании проекта и основные идеи, с успехом реализованные в нем

#ERRORS

┌──────────────────────┐
│ Сообщения об ошибках │
└──────────────────────┘

    Ошибки могут возникать при вводе некорректной строки, выполнении программы или из-за нарушения каких-либо условий, необходимых для работы XLogo, например, нехватки памяти
    Сообщения об ошибках выводятся на ~консоль,CONSOLE~
    Обычно сразу после сообщения об ошибке, через запятую, выводятся соответственно строка программы, в которой возникла ошибка, и позиция в строке, указывающая на возможное место ошибки
    В большинстве случаев строка с ошибкой подается на редактирование, и курсор устанавливается на возможное место ошибки
    Контекста сообщения об ошибке обычно должно хватать для понимания причины ошибки
    
#XLOGOOUTSIDE

┌────────────────────┐
│ Язык XLogo снаружи │
└────────────────────┘

    Снаружи XLogo выглядит вполне дружелюбно. Удобный интерфейс, меню, редактор сделали свое дело.
    В данной версии, к сожалению, отсутствует поддержка мыши. Отсутствие мыши нисколько не осложняет управление программой, т.к. количество диалогов и кнопок сведено к минимуму

~Меню,MENU~
~Окно вывода,OUTWINDOW~
~Окно выбора файлов,FILEWINDOW~
~Консоль,CONSOLE~
~Статусная строка,STATUSLINE~

#OUTWINDOW

┌─────────────┐
│ Окно вывода │
└─────────────┘

    Окно расположено по середине экрана
    На нем вы можете видеть результаты своего труда: линии, окружности разного цвета, составленные в самые замысловатые и замечательные формы
    Кроме того, если приглядитесь внимательней, то увидите саму "черепашку" - равнобедренный треугольник, заостренным концом указывающий направление движения "черепашки"

#MENU

┌──────┐
│ Меню │
└──────┘

    Меню несколько излишне, т.к. почти все его функции можно выполнить с помощью нажатия некоторых клавиш, но помогает, в основном, начинающим пользователям
    Строка меню расположена в самой верхней части экрана
    При нажатии из ~консоли,CONSOLE~ клавиши F10, "всплывает" окошко меню со списком предлагаемых действий.
    По списку можно двигаться клавишами "вверх", "вниз", а также нажимать "влево", "вправо" для выбора нужного меню.

~Файл,MENU_FILE~
~Правка,MENU_EDIT~
~Программа,MENU_PROGRAM~
~Помощь,MENU_HELP~

#MENU_FILE

┌─────────────┐
│ Меню "Файл" │
└─────────────┘

Создать

    Старая программа при необходимости записывается на диск и удаляется из памяти
    Происходит подготовка к введению новой программы
    Смотрите также ~NEW,NEW~

Загрузить...

    Старая программа при необходимости записывается на диск и вместо нее загружается новая
    Смотрите также ~LOAD,LOAD~

Сохранить

    Если имя программы еще не определено, вызывается окошко для выбора сохраняемого файла
    Программа сохраняется на диск
    Смотрите также ~SAVE,SAVE~

Сохранить как...

    Выводится окно для выбора сохраняемого файла
    Программа сохраняется на диск

Выход

    Старая программа при необходимости записывается на диск
    Происходит выход из системы
    Смотрите также ~QUIT,QUIT~

#MENU_EDIT

┌───────────────┐
│ Меню "Правка" │
└───────────────┘

Редактирование
    
    Вызывается окно для выбора редактируемой строки
    Включается режим редактирования строк программы
    Выбранная строка подается в ~консоль,CONSOLE~ для редактирования
    Смотрите также ~EDIT,EDIT~

Замена

    Вызывается окно для выбора заменяемой строки
    Включается режим замены старых строк программы новыми
    Смотрите также ~CHANGE,CHANGE~

Вставка

    Вызывается окно для выбора позиции вставляемой строки
    Включается режим вставки новых строк программы
    Вставка будет происходить перед выбранной строкой
    Смотрите также ~INSERT,INSERT~

#MENU_PROGRAM

┌──────────────────┐
│ Меню "Программа" │
└──────────────────┘

Листинг

    Весь текст программы выводится на консоль
    Смотрите также ~LIST,LIST~

Запуск

    Происходит запуск программы с текущей строки, либо с начала, если вся программа уже выполнена
    Смотрите также ~RUN,RUN~

Статус пера

    Показывает/прячет перо
    Смотрите также ~PENHIDE,PENHIDE~ и ~PENSHOW,PENSHOW~

Количество строк

    Печатает на консоль количество строк в программе
    Смотрите также ~LINES,LINES~

#MENU_HELP

┌───────────────┐
│ Меню "Помощь" │
└───────────────┘

Содержание

    Выводит на экран окно помощи с содержанием

Индекс

    Выводит на экран окно помощи со списком всех команд

Поиск темы

    Выводит на экран окно помощи на тему, имя которой указано курсором в ~строчном редакторе,EDITOR~

Предыдущая тема

    Выводит на экран окно помощи, которое выводилось в предыдущий раз

О программе...

    Выводит на экран стартовое окошко с названием программы

#CONSOLE

┌─────────┐
│ Консоль │
└─────────┘

    Консоль расположена под ~окном вывода,OUTWINDOW~ и представляет из себя текстовую панель на которой выводятся различные сообщения
    Самая нижняя строка со стрелкой служит ~строчным редактором,EDITOR~, в которой вводятся различные команды
    Каждое новое сообщение выводится в строке над редактором, все выше стоящие строки сдвигаются вверх
    Строки, скрывающиеся сверху, теряются не безвозвратно: их можно просмотреть, нажимая клавиши PageUp и PageDown
    Большинство команд XLogo не обязательно вводить полностью: попробуйте понажимать клавиши Shift+A,B,C и т.д., я думаю вам понравится

#EDITOR

┌───────────────────┐
│ Строчный редактор │
└───────────────────┘

    С помощью строчного редактора можно вводить и редактировать строки
    Курсор обозначается мерцающей полоской или мерцающим квадратом
    Если включен режим вставки, то каждый введенный символ вставляется перед курсором, и курсор сдвигается на одну позицию вправо
    Eсли включен режим замены, то символ, на котором стоит курсор, заменяется на введенный символ, и курсор сдвигается на одну позицию вправо
    Eсли вводимая строка превышает по размеру строку редактора, то будет выводиться только часть строки
    Все введенные строки запоминается в памяти и при необходимости их можно пролистать клавишами "вверх" и "вниз"
    Управляющие клавиши редактора:

Left/Right
    
    Курсор сдвигается на одну позицию влево/вправо

Ctrl+Left/Right

    Курсор сдвигается на следующее слева/справа слово, отделенное пробелами или запятыми

Home/End

    Курсор сдвигается в начало/конец строки

Delete
 
    Удаляется символ, на котором стоит курсор
    Курсор остается на месте

Backspace

    Удаляется символ перед курсором
    Курсор сдвигается на одну позицию влево

Insert

    Переключает режим замены/вставки

Enter

    Завершает ввод строки

#FILEWINDOW

┌────────────────────┐
│ Окно выбора файлов │
└────────────────────┘

    В этом окне можно с удобством указать любой интересующий вас файл или ввести имя нового файла
    Строка редактирования предназначена для указания конкретного файла, либо маски, по которой будет выводиться список файлов
    Список файлов включает в себя имена подкаталогов в текущем каталоге, а также родительский каталог ".."
    По списку можно передвигаться нажимая клавиши "вверх" и "вниз", а также PageUp и PageDown, выбор конкретного файла завершается нажатием Enter, если был указан каталог, происходит смена текущего каталога выбранным
    Имена файлов подсвечиваются голубым цветом, каталогов - белым
    Для переключения между редактором и списком используйте клавишу Tab, при указании маски в редакторе, автоматически происходит переключение в список файлов

#STATUSLINE

┌──────────────────┐
│ Статусная строка │
└──────────────────┘

    Статусная строка расположена в нижней части экрана
    На ней отображается следующая служебная информация в порядке слева направо:

    1) Состояние пера

 - перо показывается и опущено
 - перо показывается и поднято
 - перо спрятано и опущено
 - перо спрятано и поднято

    2) Цвет фона/пера
    3) Текущий угол пера
    4) Координаты x,y пера
    5) Имя программы
    6) Индикатор "программа не сохранена" (звездочка красного цвета)
    7) Режим редактирования программы
    8) Номер текущей строки программы : текущая позиция курсора в строке

#XLOGOINSIDE

┌────────────────────┐
│ Язык XLogo изнутри │
└────────────────────┘

    Logo - "черепаший" язык, позволит вам рисовать на экране монитора замысловатые узоры, управляя курсором-черепашкой
    Черепашка может бегать взад и вперед, поворачиваться влево и вправо, оставляя под собой следы разных цветов, которые мы и видим на экране
    Данная реализация "черепашьего" языка позволяет черепашке также решать самой что делать, "впадать в циклы", "отвлекаться на процедуры" и делать много других полезных вещей

~Общий синтаксис команд языка,SYNTAX~
~Команды,INDEX~
~Выражения,EXPRESSIONS~
~Идентификаторы,IDENTS~
~Константы,CONSTS~
~Псевдо-функции,FUNCTIONS~

#SYNTAX

┌──────────────────────────────┐
│ Общий синтаксис команд языка │
└──────────────────────────────┘

    Все команды языка сопровождаются параметрами (это либо ~константа,CONSTS~, либо ~идентификатор,IDENTS~, либо ~выражение,EXPRESSIONS~), разделенными запятыми
    Параметров может быть ни одного, один или несколько (максимум четыре)
    Примеры:

DEL 1,2
FWD 50
ELLIPSE 10
ELLIPSE 10,20,CURANGLE+5
LET A,10+B

    Кроме того, последний пример можно записать короче:

A=10+B

    Это единственное исключение из общих правил, вводимое языком. Оно излишне, но выглядит красиво...

#EXPRESSIONS

┌───────────┐
│ Выражения │
└───────────┘

    Выражения в языке XLogo используются для передачи большинства параметров в ~команды,INDEX~ языка
    Выражения могут состоять из ~идентификаторов,IDENTS~,~констант,CONSTS~ и операторов
    Операторы делятся на 7 групп: 1-ая группа имеет наибольший приоритет, 7-ая группа - наименьший
    Операторы в одной группе имеют одинаковый приоритет
    Все операторы в языке XLogo бинарные, то есть всегда стоят между двумя операндамu
    Операнды и результат операций - целые числа

    Таблица приоритетов операций
 ┌────────────────────────────────────┐
 │ I группа                           │
 ├────┬───────────────────────────────┤
 │ ^  │ Возведение в степень          │
 ├────┴───────────────────────────────┤
 │ II группа                          │
 ├────┬───────────────────────────────┤
 │ *  │ Умножение                     │
 │ /  │ Деление                       │
 │ %  │ Взятие остатка от деления     │
 ├────┴───────────────────────────────┤
 │ III группа                         │
 ├────┬───────────────────────────────┤
 │ +  │ Сложение                      │
 │ -  │ Вычитание                     │
 ├────┴───────────────────────────────┤
 │ IV группа                          │
 ├────┬───────────────────────────────┤
 │ <  │ Меньше                        │
 │ <= │ Меньше либо равно             │
 │ >  │ Больше                        │
 │ >= │ Больше либо равно             │
 ├────┴───────────────────────────────┤
 │ V группа                           │
 ├────┬───────────────────────────────┤
 │ == │ Равно                         │
 │ != │ Не равно                      │
 ├────┴───────────────────────────────┤
 │ VI группа                          │
 ├────┬───────────────────────────────┤
 │ && │ Логическая операция И         │
 ├────┴───────────────────────────────┤
 │ VII группа                         │
 ├────┬───────────────────────────────┤
 │ || │ Логическая операция ИЛИ       │
 └────┴───────────────────────────────┘

#IDENTS

┌────────────────┐
│ Идентификаторы │
└────────────────┘

    Идентификаторы в языке XLogo исползуются в основном в выражениях
    Идентификаторы могут состоять из букв и цифр, но обязательно начинаются с буквы
    Имя идентификатора не должно совпадать не с одним из зарезервированных слов (т.е. ~команд, INDEX~)

Примеры правильных идентификаторов:

DOOMY
SPECIAL1234

Примеры неправильных идентификаторов:

1NOGOOD    - начинается с цифры
ABSOLUTE_4 - содержит неверный символ
ANGLE      - является зарезервированным

#CONSTS

┌───────────┐
│ Константы │
└───────────┘

    Константы в языке XLogo - это целые числа в oтрезке [-32768;+32767]
    Так как в языке отсутствуют унарные операции, то чтобы представить отрицательные числа их нужно вычесть из нуля, т.е :

число -5 можно записать в виде 0-5 или даже 5-10
число -20 можно записать в виде 0-20, а можно 30-50, кому как нравится

#FUNCTIONS

┌────────────────┐
│ Псевдо-функции │
└────────────────┘

    Это ~идентификаторы,IDENTS~, всегда присутствующие в программе, имеющие определенные имена и принимающие значения, зависящие от ситуации
    Перечислить ?

    Цвета (не меняют значения и применяются в качестве обычных констант) :

BLACK        - черный (или цвет фона)
BLUE         - синий
GREEN        - зеленый
CYAN         - голубой
RED          - красный
MAGENTA      - фиолетовый
BROWN        - коричневый
LIGHTGRAY    - светло-серый
DARKGRAY     - серый
LIGHTBLUE    - светло-синий
LIGHTGREEN   - светло-зеленый
LIGHTCYAN    - светло-голубой
LIGHTRED     - светло-красный
LIGHTMAGENTA - светло-фиолетовый
YELLOW       - желтый
WHITE        - белый

    А также :

МАXX     - максимальная X-координата
MAXY     - максимальная Y-координата
CURX     - текущая X-координата
CURY     - текущая Y-координата
CURCOLOR - текущий цвет
CURANGLE - текущий угол
PENSTATE - перо опущено/поднято
RANDOM   - произвольное целое число

    Этим идентификаторам можно присваивать значения, но oни ни на что не повлияют

#BPTOGGLE

┌──────────┐
│ BPTOGGLE │
└──────────┘

Синтаксис:

    BPTOGGLE <string>

Действие:

    Устанавливает/убирает точку останова на строке string

    Выполнение программы будет приостанавливаться на этой строке
    В листинге такая строка выделяется красным цветом
    Для продолжения выполнения программы можно набрать ~RUN,RUN~ или нажать клавишу F9

Смотрите также:

    ~BPCLEAR,BPCLEAR~
    ~STOP,STOP~

Пример:

    BPTOGGLE 5

#BPCLEAR

┌─────────┐
│ BPCLEAR │
└─────────┘

Синтаксис:

    BPCLEAR

Действие:

    Убирает все ранее установленные точки останова

Смотрите также:

    ~BPTOGGLE,BPTOGGLE~
    ~STOP,STOP~

#CHANGE

┌────────┐
│ CHANGE │
└────────┘

Синтаксис:

    CHANGE [string]

Действие:

    Включает режим замены и по необходимости делает строку с номером string текущей
    Аналогичное действие выполняется по нажатии клавиши F6

Смотрите также:

    ~ЕDIT,EDIT~
    ~INSERT,INSERT~

Пример:

    CHANGE 10

#EDIT

┌──────┐
│ EDIT │
└──────┘

Синтаксис:

    EDIT [string]

Действие:

    Включает режим редактирования и по необходимости делает строку с номером string текущей
    Аналогичное действие выполняется по нажатии клавиши F5

Смотрите также:

    ~CHANGE,CHANGE~
    ~INSERT,INSERT~

Пример:

    EDIT 3

#INSERT

┌────────┐
│ INSERT │
└────────┘

Синтаксис:

    INSERT [string]

Действие:

    Включает режим вставки и по необходимости делает строку с номером string текущей
    Вставка вводимых строк происходит перед строкой с номером string
    Аналогичное действие выполняется по нажатии клавиши F7

Смотрите также:

    ~ЕDIT,EDIT~
    ~CHANGE,CHANGE~

Пример:

    INSERT 8

#DEL

┌─────┐
│ DEL │
└─────┘

Синтаксис:

    DEL <from>[,to]

Действие:

    Удаляет все строки начиная с from и до to включительно и перезапускает программу
    Если параметр to не указан, то удаляется только строка с номером from

Смотрите также:

    ~NEW,NEW~

Пример:

    DEL 5,8

#LINES

┌───────┐
│ LINES │
└───────┘

Синтаксис:

    LINES

Действие:

    Выводит на консоль количество строк в программе

Смотрите также:

    ~LIST,LIST~

#LIST

┌──────┐
│ LIST │
└──────┘

Синтаксис:

    LIST [from][,to]

Действие:

    Выводит на консоль листинг программы начиная со строки с номером from и заканчивая строкой с номером to
    Если не указан второй параметр, выдается весь листинг программы, начиная со строки с номером from
    Если не указаны оба параметра, выдается полный листинг программы

Смотрите также:

    ~LINES,LINES~

Пример:

    LIST 5,8

#LOAD

┌──────┐
│ LOAD │
└──────┘

Синтаксис:

    LOAD

Действие:

    Загружает с диска в память новую программу вместо старой
    При необходимости старая программа записывается на диск
    Выводит окно для выбора загружаемого файла
    Аналогичное действие выполняется по нажатии клавиши F3

Смотрите также:

    ~SAVE,SAVE~
    ~NEW,NEW~

#NEW

┌─────┐
│ NEW │
└─────┘

Синтаксис:

    NEW

Действие:

    Старая программа по необходимости сохраняется на диск и стирается из памяти
    Происходит подготовка к написанию новой программы

Смотрите также:

    ~LOAD,LOAD~
    ~SAVE,SAVE~

#PENHIDE

┌─────────┐
│ PENHIDE │
└─────────┘

Синтаксис:

    PENHIDE

Действие:

    Прячет перо
    Аналогичное действие выполняется по нажатии клавиши F4

Смотрите также:

    ~PENSHOW,PENSHOW~

#PENSHOW

┌─────────┐
│ PENSHOW │
└─────────┘

Синтаксис:

    PENSHOW

Действие:

    Показывает перо
    Аналогичное действие выполняется по нажатии клавиши F4

Смотрите также:

    ~PENHIDE,PENHIDE~

#PRINT

┌───────┐
│ PRINT │
└───────┘

Синтаксис:

    PRINT <expr>

Действие:

    Вычисляет выражение expr и выводит его на консоль

Смотрите также:

    ~Выражения,EXPRESSIONS~

Пример:

    PRINT (2+4)*5/3-1
    PRINT A+B+C
    PRINT CURX

#QUIT

┌──────┐
│ QUIT │
└──────┘

Синтаксис:

    QUIT

Действие:

    Oсуществляет выход из программы и при необходимости запись программы на диск
    Аналогичное действие выполняется по нажатии клавиш Alt-X

Смотрите также:

    ~SAVE,SAVE~

#RUN

┌─────┐
│ RUN │
└─────┘

Синтаксис:

    RUN

Действие:

    Производит запуск программы с текущей строки или, при необходимости, с первой
    Текущей строкой становится строка, следующая за последней строкой программы

Смотрите также:

    ~Сообщения об ошибках,ERRORS~

#SAVE

┌──────┐
│ SAVE │
└──────┘

Синтаксис:

    SAVE

Действие:

    Сохраняет на диск программу, находящуюся в памяти
    При необходимости выводит окно для выбора сохраняемого файла
    Аналогичное действие выполняется по нажатии клавиши F2

Смотрите также:

    ~LOAD,LOAD~
    ~NEW,NEW~

#ADD

┌─────┐
│ ADD │
└─────┘

Синтаксис:

    ADD <var>,<expr>

Действие:

    К переменной var прибавляется значение выражения expr
    Полученный результат присваивается обратно переменной var

Смотрите также:

    ~LET,LET~
    ~MUL,MUL~
    ~SUB,SUB~
    ~DIV,DIV~

Пример:

    ADD A,1
    ADD A,B

Ошибка:

    ADD 4,A

#LET

┌─────┐
│ LET │
└─────┘

Синтаксис:

    LET <var>,<expr>

Действие:

    Переменной var присваивается значение выражения expr

Смотрите также:

    ~ADD,ADD~
    ~MUL,MUL~
    ~SUB,SUB~
    ~DIV,DIV~

Пример:

    LET A,1
    LET A,B

Ошибка:

    LET 1,A

#MUL

┌─────┐
│ MUL │
└─────┘

Синтаксис:

    MUL <var>,<expr>

Действие:

    Переменная var умножается на значение выражения expr
    Полученный результат присваивается обратно переменной var

Смотрите также:

    ~ADD,ADD~
    ~LET,LET~
    ~SUB,SUB~
    ~DIV,DIV~

Пример:

    MUL A,3
    MUL A,B

Ошибка:

    MUL 4,A

#SUB

┌─────┐
│ SUB │
└─────┘

Синтаксис:

    SUB <var>,<expr>

Действие:

    Из переменной var вычитается значение выражения expr
    Полученный результат присваивается обратно переменной var

Смотрите также:

    ~ADD,ADD~
    ~LET,LET~
    ~MUL,MUL~
    ~DIV,DIV~

Пример:

    SUB A,3
    SUB A,B

Ошибка:

    SUB 4,A

#DIV

┌─────┐
│ DIV │
└─────┘

Синтаксис:

    DIV <var>,<expr>

Действие:

    Переменная var делится на значение выражения expr
    При делении на ноль возникает ~ошибка,ERRORS~
    Полученный результат присваивается обратно переменной var

Смотрите также:

    ~ADD,ADD~
    ~LET,LET~
    ~MUL,MUL~
    ~SUB,SUB~

Пример:

    DIV A,3
    DIV A,B

Ошибка:

    DIV 4,A

#BCOLOR

┌────────┐
│ BCOLOR │
└────────┘

Синтаксис:

    BCOLOR <color>

Действие:

    Устанавливает цвет фона ~окна вывода,OUTWINDOW~ значением color
    Номер цвета может быть от нуля до 15-ти

Смотрите также:

    ~PCOLOR,PCOLOR~

Пример:

    BCOLOR YELLOW

#PCOLOR

┌────────┐
│ PCOLOR │
└────────┘

Синтаксис:

    PCOLOR <color>

Действие:

    Устанавливает цвет пера значением color
    Номер цвета может быть от нуля до 15-ти

Смотрите также:

    ~BCOLOR,BCOLOR~

Пример:

    PCOLOR RED

#CALL

┌──────┐
│ CALL │
└──────┘

Синтаксис:

    CALL <proc>

Действие:

    Производит вызов процедуры с именем proc
    После выполнения процедуры управление передается на следующую за CALL строку программы

Смотрите также:

    ~PROC,PROC~
    ~RETURN,RETURN~

Пример:

    PROC B
     FWD 10
    RETURN
    CALL B

#PROC

┌──────┐
│ PROC │
└──────┘

Синтаксис:

    PROC <proc>

Действие:

    Заголовок процедуры с именем proc
    Все следующие за ним команды не будут выполняться, пока не встретится RETURN
    Эти команды могут быть выполнены только посредством команды CALL с именем proc

Смотрите также:

    ~CALL,CALL~
    ~RETURN,RETURN~

Пример:

    PROC B
     FWD 10
    RETURN
    CALL B

#RETURN

┌────────┐
│ RETURN │
└────────┘

Синтаксис:

    RETURN

Действие:

    Завершает описание процедуры
    Все следующие за RETURN команды будут выполняться как обычно

Смотрите также:

    ~CALL,CALL~
    ~PROC,PROC~

Пример:

    PROC B
     FWD 10
    RETURN
    CALL B

#DELAY

┌───────┐
│ DELAY │
└───────┘

Синтаксис:

    DELAY [count]

Действие:

    Производит задержку выполнения программы в count миллисекунд
    DELAY без параметра выполнит задержку до нажатия любой клавиши
    В любом случае задержку можно пропустить, нажав Escape

Смотрите также:

    ~STOP,STOP~

Пример:

    DELAY 10

#STOP

┌──────┐
│ STOP │
└──────┘

Синтаксис:

    STOP

Действие:

    На этой команде программа приостанавливается, но может быть продолжена по команде ~RUN,RUN~

Смотрите также:

    ~DELAY,DELAY~

Пример:

    STOP

#ELLIPSE

┌─────────┐
│ ELLIPSE │
└─────────┘

Синтаксис:

    ELLIPSE <rX>[,rY][,start][,end]

Действие:

    Рисует эллипс с центром в текущих координатах, радиуса rX по горизонтали, rY по вертикали
    Если параметр rY не указан, рисуется окружность радиуса rX
    Параметры start и end задают величины углов в градусах для рисования дуги эллипса, соответственно, начальный и конечный угол дуги

Пример:

    ELLIPSE 10
    ELLIPSE 10 20 0 360
    ELLIPSE 30 10 0 180

#FILL

┌──────┐
│ FILL │
└──────┘

Синтаксис:

    FILL <color>

Действие:

    Заполняет область под пером, ограниченную рамкой цвета color, текущим цветом пера

Пример:

   PCOLOR 5
   FILL LIGHTGREEN

#IF

┌────┐
│ IF │
└────┘

Синтаксис:

    IF <condition>

Действие:

    Если условие condition - истина (отлично от нуля), следующие за IF команды будут выполняться, пока не встретится ENDIF
    Иначе, если после ENDIF следует ELSE, будут выполняться все команды, следующие за ELSE, пока не встретится ENDIF

Смотрите также:

    ~ELSE,ELSE~
    ~ENDIF,ENDIF~

Пример:

     A = 1
     IF A > 0
       FWD 10
     ELSE
       BWD 10
     ENDIF

#ELSE

┌──────┐
│ ELSE │
└──────┘

Синтаксис:

    ELSE

Действие:

    Если условие при IF оказалось ложью (равно нулю), все следующие команды после ELSE будут выполняться, пока не встретится ENDIF

Смотрите также:

    ~IF,IF~
    ~ENDIF,ENDIF~

Пример:

     A = 1
     IF A > 0
       FWD 10
     ELSE
       BWD 10
     ENDIF

#ENDIF

┌───────┐
│ ENDIF │
└───────┘

Синтаксис:

    ENDIF

Действие:

    Завершает IF, после чего все следующие команды будут выполняться обычным образом

Смотрите также:

    ~ELSE,ELSE~
    ~ENDIF,ENDIF~

Пример:

     A = 1
     IF A > 0
       FWD 10
     ELSE
       BWD 10
     ENDIF

#PENUP

┌───────┐
│ PENUP │
└───────┘

Синтаксис:

    PENUP

Действие:

    Поднимает перо
    Все команды, перемещающие перо, прекращают оставлять за собой след

Смотрите также:

    ~PENDOWN,PENDOWN~

Пример:

    PENUP
    SETX 10
    PENDOWN

#PENDOWN

┌─────────┐
│ PENDOWN │
└─────────┘

Синтаксис:

    PENDOWN

Действие:

    Опускает перо
    Все команды, перемещающие перо, будут оставлять за собой след

Смотрите также:

    ~PENUP,PENUP~

Пример:

    PENUP
    SETX 10
    PENDOWN

#SETXY

┌───────┐
│ SETXY │
└───────┘

Синтаксис:

    SETXY <X>,<Y>

Действие:

    Перемещает перо в точку с координатами X,Y
    Если перо опущено, перемещение будет отображено линией

Смотрите также:

    ~SETX,SETX~
    ~SETY,SETY~

Пример:

    PENUP
    SETXY 10, 53
    PENDOWN

#SETX

┌──────┐
│ SETX │
└──────┘

Синтаксис:

    SETX <X>

Действие:

    Перемещает перо в точку с координатой X по горизонтали, по вертикали перо не будет перемещаться
    Если перо опущено, перемещение будет отображено линией

Смотрите также:

    ~SETXY,SETXY~
    ~SETY,SETY~

Пример:

    PENUP
    SETX 10
    PENDOWN

#SETY

┌──────┐
│ SETY │
└──────┘

Синтаксис:

    SETY <Y>

Действие:

    Перемещает перо в точку с координатой Y по вертикали, по горизонтали перо не будет перемещаться
    Если перо опущено, перемещение будет отображено линией

Смотрите также:

    ~SETXY,SETXY~
    ~SETX,SETX~

Пример:

    PENUP
    SETY 10
    PENDOWN

#ANGLE

┌───────┐
│ ANGLE │
└───────┘

Синтаксис:

    ANGLE <angle>

Действие:

    Перо становится под углом angle в градусах

Смотрите также:

    ~RIGHT,RIGHT~
    ~LEFT,LEFT~

Пример:

    ANGLE 45

#LEFT

┌──────┐
│ LEFT │
└──────┘

Синтаксис:

    LEFT <angle>

Действие:

    Поворачивает перо на angle градусов против часовой стрелки

Смотрите также:

    ~ANGLE,ANGLE~
    ~RIGHT,RIGHT~

Пример:

    LEFT 45

#RIGHT

┌───────┐
│ RIGHT │
└───────┘

Синтаксис:

    RIGHT <angle>

Действие:

    Поворачивает перо на angle градусов по часовой стрелке

Смотрите также:

    ~ANGLE,ANGLE~
    ~LEFT,LEFT~

Пример:

    RIGHT 45

#FWD

┌─────┐
│ FWD │
└─────┘

Синтаксис:

    FWD <step>

Действие:

    Перемещает перо вперед на step пикселей
    Если перо опущено, перемещение будет отображено линией

Смотрите также:

    ~BWВ,BWD~

Пример:

    FWD 100
    FWD 0-100

#BWD

┌─────┐
│ BWD │
└─────┘

Синтаксис:

    BWD <step>

Действие:

    Перемещает перо назад на step пикселей
    Если перо опущено, перемещение будет отображено линией

Смотрите также:

    ~FWВ,FWD~

Пример:

    BWD 100
    BWD 0-100

#CLS

┌─────┐
│ CLS │
└─────┘

Синтаксис:

    CLS

Действие:

    Очищает ~окно вывода,OUTWINDOW~

Пример:

    CLS

#LINESTYLE

┌───────────┐
│ LINESTYLE │
└───────────┘

Синтаксис:

    LINESTYLE <style>, <thickness>

Действие:

    Устанавливает тип линии в значение style и толщину линии в заначение thickness
    0 <=   style   <= 4  диапозон
    0 <= thickness <= 3  диапозон

Пример:

    LINESTYLE 0, 2

#REPEAT

┌────────┐
│ REPEAT │
└────────┘

Синтаксис:

    REPEAT <count>

Действие:

    Заголовок цикла
    Следующие за REPEAT до END команды будут выполнены ровно count раз
    Цикл можно перервать нажатием клавиши Escape

Смотрите также:

    ~WHILE,WHILE~
    ~END,END~

Пример:

    REPEAT 100
     FWD 10
     LEFT 10
    END

#WHILE

┌───────┐
│ WHILE │
└───────┘

Синтаксис:

    WHILE <condition>

Действие:

    Заголовок цикла
    Следующие за WHILE и до END команды будут выполняться, пока условие condition будет истиной (то есть будет отлично от нуля)
    Цикл можно прервать нажатием клавиши Escape

Смотрите также:

    ~REPEAT,REPEAT~
    ~END,END~

Пример:

    A = 1
    WHILE A < 100
     FWD A
     LEFT 10
     A = A + 1
    END

#END

┌─────┐
│ END │
└─────┘

Синтаксис:

    END

Действие:

    Завершает тело цикла и выполняет его необходимое количество раз

Смотрите также:

    ~WHILE,WHILE~
    ~REPEAT,REPEAT~

Пример:

    REPEAT 10
     A = 1
     WHILE A < 100
      FWD A
      LEFT 10
      A = A + 1
     END
    END

#
